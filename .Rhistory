scales = list(list(alternating=1), x=list(cex=1.5),y=list(cex=1.5)),
)
levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.2)),
)
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.2)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.4),y=list(cex=1)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=0.9),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=5),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
## Save workspace
save.image(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
season = "1920"
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
season = "1819"
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
season
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
## Choose Premier Season
season<-"2021"
# set number of steps to discard
burn_in_level<-50000
# Number of steps to retain + to discard
S = 200000+burn_in_level
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
my_seed = 1909
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
season_lab
year1 = season[1:2]
year2 = season[3:4]
season_lab = paste0(year1, "/",year2)
season_lab
season
season[1:2]
season[1][1:2]
type(season)
str(season)
year1 = substr(season, 1, 2)
year1
year2 = substr(season, 3, 4)
season_lab = paste0(year1, "/",year2)
season_lab
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
season_lab
season = 8889
season = "8889"
year1 = substr(season, 1, 2)
year2 = substr(season, 3, 4)
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
season_lab
season = 9900
year1 = substr(season, 1, 2)
year2 = substr(season, 3, 4)
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
season_lab
season = 2021
season = "2021"
# option to print season with 4 figures
year1 = substr(season, 1, 2)
year2 = substr(season, 3, 4)
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
###   VISUALIZE AND SAVE HEATMAP FOR RESULTS TABLE
####################################################################################
library("lattice")
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
