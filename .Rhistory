K_from_labels_burned<-BURN_BABY_BURN(seq_to_burn =K_from_labels,maxS=S,
burn_in_level = burn_in_level,
is_matrix=FALSE)
True_K_from_Z_burned<-BURN_BABY_BURN(seq_to_burn =True_K_from_Z,maxS=S,
burn_in_level = burn_in_level,
is_matrix=FALSE)
log_lik_seq_burned<-BURN_BABY_BURN(seq_to_burn =log_lik_seq,maxS=S,
burn_in_level = burn_in_level,
is_matrix=FALSE)
#This two should coincide
table(K_seq_burned)
table(K_from_labels_burned)
#This two should coincide
table(True_K_seq_burned)
table(True_K_from_Z_burned)
####################################################################################
## Label correction and analysis
library(collpcm) # used for label switching algorithm
source("LABEL_CORRECTION_AND_ANALYSIS.R")
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table ordered by block membership for season: ", season), scales = list(alternating=1),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5)
panel.abline(v = how_many_top+0.5)
})
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table ordered by block membership for season: ", season), scales = list(alternating=1),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
## Save workspace
save.image(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1),
)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1)))
dev.off()
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1)))
png(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1)))
dev.off()
dev.off()
png(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".png"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1)))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season), scales = list(alternating=1)))
dev.off()
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
## Choose Premier Season
season<-"2021"
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
set.seed(1605)
# set number of steps to discard
burn_in_level<-50000
# Number of steps to retain + to discard
S = 200000+burn_in_level
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
## set seed
my_seed<-1909
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
setwd("~/Desktop/Paper_Nial_SBM/Football_SBM")
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
burn_in_level
paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData")
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
setwd("~/Desktop/Paper_Nial_SBM/Football_SBM")
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
setwd("~/Desktop/Paper_Nial_SBM/Football_SBM")
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
season
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table ordered by block membership for season: ", season),
scales = list(list(alternating=1), x=list(cex=.3),y=list(cex=.3)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table ordered by block membership for season: ", season),
scales = list(list(alternating=1), x=list(cex=.3),y=list(cex=.3)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5)
panel.abline(v = how_many_top+0.5)
})
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table ordered by block membership for season: ", season),
scales = list(list(alternating=1), x=list(cex=.3),y=list(cex=.3)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
###   VISUALIZE AND SAVE HEATMAP FOR RESULTS TABLE
####################################################################################
library("lattice")
levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=.3),y=list(cex=.3)),
)
levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.5),y=list(cex=1.5)),
)
levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.2)),
)
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.2)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.4),y=list(cex=1)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1.2),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=0.9),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = paste0("Results table season: ", season),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=5),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
## Save workspace
save.image(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
season = "1920"
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
season = "1819"
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
season
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.4)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
