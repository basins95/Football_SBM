Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.3)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.3)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.2)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.2)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.2)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
))
dev.off()
season
clc
season<-"1819"
rm(list = ls())
#cat("\014")
season<-"1819"
## set seed
my_seed<-1909
#hyperparameters
gamma_0=1
beta_0=1
#Fixing K max
K_max=5
set.seed(1605)
#random initialization of K and Z
K_current<-sample.int(n=K_max, size=1)
Z_current<-sample.int(n=K_current, size=N, replace=TRUE)
#Create directory inside Inference_results for the selected season
dir.create(paste0("Inference_results//mcmc_Premier_Season_", season))
## set seed
my_seed<-1909
## READ DATA FROM RESULTS TABLE
source("READ_TABLE_RESULTS.R")
###   VISUALIZE AND SAVE HEATMAP FOR RESULTS TABLE
####################################################################################
library("lattice")
palf <-colorRampPalette(c("green3", "yellow", "red1"))
# option to print season with 4 figures
year1 = substr(season, 1, 2)
year2 = substr(season, 3, 4)
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
))
dev.off()
## Load functions used in the MCMC algorithm
source("SBM_FUNCTIONS.R")
library(seqinr)   #necessary for the swap function
library(plyr)     #to use mapvalues
#hyperparameters
gamma_0=1
beta_0=1
#Fixing K max
K_max=5
set.seed(1605)
#random initialization of K and Z
K_current<-sample.int(n=K_max, size=1)
Z_current<-sample.int(n=K_current, size=N, replace=TRUE)
# set number of steps to discard
burn_in_level<-50000
# Number of steps to retain + to discard
S = 200000+burn_in_level
# Initialize structures for chain output
K_seq=numeric(S)
load(paste0("Inference_results//mcmc_Premier_Season_",season,
"//WS_Premier_Season_", season, "_", (S-burn_in_level)/1000,
"k_seed_",my_seed,".RData"))
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1.1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=1)),
))
dev.off()
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.9)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.9)),
))
dev.off()
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.9)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.9)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
# VISUALIZE AND SAVE PERMUTED MATCH GRID AFTER ESTIMATING K AND Z
####################################################################################
if (K_estimated>1){
Winner_label = Team_Names[rownames(Ordered_Tabellone)[1],][1]
# select cluster percentages
Cluster_percentages = get(paste0("Cluster_Percentages_Model",
K_estimated))
Top_block = as.numeric(which.max(Cluster_percentages[,Winner_label]))
# Team is in topblock if the posterior allocation is >=0.5
Top_block_Teams = as.numeric(which(Cluster_percentages[Top_block,]>50))
how_many_top = length(Top_block_Teams)
all = 1:(dim(O)[1])
the_others <- all[!all %in% Top_block_Teams]
new_block_order = c(Top_block_Teams, the_others)
Reordered_O = O[new_block_order,]
Final_O = Reordered_O[,new_block_order]
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season), cex= 2),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.8)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Estimated_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(Final_O[nrow(Final_O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main = list(paste0("Results table ordered by block membership for season: ",
season_lab), cex= 1.9),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.8)),
panel = function(...){
panel.levelplot(...)
panel.abline(h = (20-how_many_top)+0.5, lw = 2.5)
panel.abline(v = how_many_top+0.5, lw =2.5)
}))
dev.off()
}
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.8)),
))
# save it in folder
pdf(paste0("Inference_results//mcmc_Premier_Season_",season,
"//Heatmap_Season_", season,".pdf"),width = 10, height=10)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.8)),
))
dev.off()
setwd("~/Desktop/Paper_Nial_SBM/Football_SBM")
#Create directory inside Inference_results for the selected season
dir.create(paste0("Inference_results//mcmc_Premier_Season_", season))
## set seed
my_seed<-1909
## READ DATA FROM RESULTS TABLE
source("READ_TABLE_RESULTS.R")
## Choose Premier Season
season<-"2021"
#Create directory inside Inference_results for the selected season
dir.create(paste0("Inference_results//mcmc_Premier_Season_", season))
## set seed
my_seed<-1909
## READ DATA FROM RESULTS TABLE
source("READ_TABLE_RESULTS.R")
###   VISUALIZE AND SAVE HEATMAP FOR RESULTS TABLE
####################################################################################
library("lattice")
palf <-colorRampPalette(c("green3", "yellow", "red1"))
# option to print season with 4 figures
year1 = substr(season, 1, 2)
year2 = substr(season, 3, 4)
if((year1)>20){
year1<-as.character(paste0("19",year1))
}else{
year1<-as.character(paste0("20",year1))
}
if((year2)==0){
year2
year2<-as.character(paste0("200",year2))
}
season_lab = paste0(year1, "/",year2)
print(levelplot(t(O[nrow(O):1,]),
col.regions=palf(100), xlab = NULL, ylab = NULL, colorkey = FALSE,
main =  list(label=paste0("Results table season: ", season_lab), cex=2.4),
scales = list(list(alternating=1), x=list(cex=1),y=list(cex=0.8)),
))
View(Results)
View(Results)
View(Results)
## Load functions used in the MCMC algorithm
source("SBM_FUNCTIONS.R")
library(seqinr)   #necessary for the swap function
library(plyr)     #to use mapvalues
#hyperparameters
gamma_0=1
beta_0=1
#Fixing K max
K_max=5
set.seed(1605)
#random initialization of K and Z
K_current<-sample.int(n=K_max, size=1)
Z_current<-sample.int(n=K_current, size=N, replace=TRUE)
# set number of steps to discard
burn_in_level<-50000
# Number of steps to retain + to discard
S = 200000+burn_in_level
# Initialize structures for chain output
K_seq=numeric(S)
K_seq[1]<-K_current
Z_seq=matrix(nrow=S, ncol=N)
Z_seq[1,]=Z_current
labels_available<-seq(1:K_current)
# K_from labels: number K of non empty clusters
K_from_labels<-K_seq
K_from_labels[1]<-length(labels_available)
# Number of non empty clusters based on allocations in Z
True_K_from_Z<-K_from_labels
True_K_from_Z[1]<-length(table(Z_seq[1,]))
# Start of algorithm
N_current<-get_N(Lab_vec=labels_available, y_array = y, Z_vector = Z_current)
n_current<-get_n(Z_vector = Z_current,Lab_vec=labels_available)
A_current<-get_loglik(K_clusters=K_current, N_array = N_current, beta_value = beta_0)
# We keep track of "True K", that is K without the empty clusters
# equivalent to True_K_from_Z but based on n_k (to double check)
True_K_seq<-K_seq
True_K_seq[1]<-K_current-sum(n_current==0)
# we take track of the sequence of the loglik which is just
# A + log((gamma(3*beta_0)/((gamma(beta_0)^3)))
log_lik_seq<-numeric(S)
log_lik_seq[1]=A_current
# first step is the initialization
s=1
data(iris)
View(iris)
View(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
